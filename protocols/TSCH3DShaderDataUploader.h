/* made by EzioChiu.
 */

@protocol TSCH3DShaderDataUploader

@required

- (void)uniform:(TSCH3DShaderVariable *)arg1 ivec1:(const struct tvec1<int> { union { int x_1_1_1; int x_1_1_2; int x_1_1_3; } x1; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 ivec1s:(const struct vector<glm::detail::tvec1<int>, std::__1::allocator<glm::detail::tvec1<int> > > { struct tvec1<int> {} *x1; struct tvec1<int> {} *x2; struct __compressed_pair<glm::detail::tvec1<int> *, std::__1::allocator<glm::detail::tvec1<int> > > { struct tvec1<int> {} *x_3_1_1; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 ivec2:(const struct tvec2<int> { union { int x_1_1_1; int x_1_1_2; int x_1_1_3; } x1; union { int x_2_1_1; int x_2_1_2; int x_2_1_3; } x2; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 ivec2s:(const struct vector<glm::detail::tvec2<int>, std::__1::allocator<glm::detail::tvec2<int> > > { struct tvec2<int> {} *x1; struct tvec2<int> {} *x2; struct __compressed_pair<glm::detail::tvec2<int> *, std::__1::allocator<glm::detail::tvec2<int> > > { struct tvec2<int> {} *x_3_1_1; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 ivec3:(const struct tvec3<int> { union { int x_1_1_1; int x_1_1_2; int x_1_1_3; } x1; union { int x_2_1_1; int x_2_1_2; int x_2_1_3; } x2; union { int x_3_1_1; int x_3_1_2; int x_3_1_3; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 ivec3s:(const struct vector<glm::detail::tvec3<int>, std::__1::allocator<glm::detail::tvec3<int> > > { struct tvec3<int> {} *x1; struct tvec3<int> {} *x2; struct __compressed_pair<glm::detail::tvec3<int> *, std::__1::allocator<glm::detail::tvec3<int> > > { struct tvec3<int> {} *x_3_1_1; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 ivec4:(const struct tvec4<int> { union { int x_1_1_1; int x_1_1_2; int x_1_1_3; } x1; union { int x_2_1_1; int x_2_1_2; int x_2_1_3; } x2; union { int x_3_1_1; int x_3_1_2; int x_3_1_3; } x3; union { int x_4_1_1; int x_4_1_2; int x_4_1_3; } x4; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 ivec4s:(const struct vector<glm::detail::tvec4<int>, std::__1::allocator<glm::detail::tvec4<int> > > { struct tvec4<int> {} *x1; struct tvec4<int> {} *x2; struct __compressed_pair<glm::detail::tvec4<int> *, std::__1::allocator<glm::detail::tvec4<int> > > { struct tvec4<int> {} *x_3_1_1; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 mat2:(const struct tmat2x2<float> { struct tvec2<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; union { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_1_1_2; } x1[2]; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 mat3:(const struct tmat3x3<float> { struct tvec3<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; union { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_1_1_2; union { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_1_1_3; } x1[3]; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 mat4:(const struct tmat4x4<float> { struct tvec4<float> { union { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_1_1_1; union { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_1_1_2; union { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_1_1_3; union { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_1_1_4; } x1[4]; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 vec1:(const struct tvec1<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 vec1s:(const struct vector<glm::detail::tvec1<float>, std::__1::allocator<glm::detail::tvec1<float> > > { struct tvec1<float> {} *x1; struct tvec1<float> {} *x2; struct __compressed_pair<glm::detail::tvec1<float> *, std::__1::allocator<glm::detail::tvec1<float> > > { struct tvec1<float> {} *x_3_1_1; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 vec2:(const struct tvec2<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; union { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 vec2s:(const struct vector<glm::detail::tvec2<float>, std::__1::allocator<glm::detail::tvec2<float> > > { struct tvec2<float> {} *x1; struct tvec2<float> {} *x2; struct __compressed_pair<glm::detail::tvec2<float> *, std::__1::allocator<glm::detail::tvec2<float> > > { struct tvec2<float> {} *x_3_1_1; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 vec3:(const struct tvec3<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; union { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; union { float x_3_1_1; float x_3_1_2; float x_3_1_3; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 vec3s:(const struct vector<glm::detail::tvec3<float>, std::__1::allocator<glm::detail::tvec3<float> > > { struct tvec3<float> {} *x1; struct tvec3<float> {} *x2; struct __compressed_pair<glm::detail::tvec3<float> *, std::__1::allocator<glm::detail::tvec3<float> > > { struct tvec3<float> {} *x_3_1_1; } x3; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 vec4:(const struct tvec4<float> { union { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; union { float x_2_1_1; float x_2_1_2; float x_2_1_3; } x2; union { float x_3_1_1; float x_3_1_2; float x_3_1_3; } x3; union { float x_4_1_1; float x_4_1_2; float x_4_1_3; } x4; }*)arg2;
- (void)uniform:(TSCH3DShaderVariable *)arg1 vec4s:(const struct vector<glm::detail::tvec4<float>, std::__1::allocator<glm::detail::tvec4<float> > > { struct tvec4<float> {} *x1; struct tvec4<float> {} *x2; struct __compressed_pair<glm::detail::tvec4<float> *, std::__1::allocator<glm::detail::tvec4<float> > > { struct tvec4<float> {} *x_3_1_1; } x3; }*)arg2;

@end
