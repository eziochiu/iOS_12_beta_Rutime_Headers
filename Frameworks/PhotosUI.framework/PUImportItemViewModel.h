/* made by EzioChiu
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI
 */

@interface PUImportItemViewModel : PXObservable <NSCopying, PXDisplayAsset> {
    PUImportAssetCollection * _assetCollection;
    NSMutableDictionary * _assetRequestsBySize;
    NSString * _collectionIdentifier;
    NSString * _deleteSession;
    <PUImportDisplayDelegate> * _displayDelegate;
    bool  _duplicate;
    double  _imageProcessingEndTime;
    double  _imageProcessingStartTime;
    NSMutableDictionary * _imageRepresentationsBySize;
    PHImportAsset * _importAsset;
    NSDate * _importDate;
    bool  _isDeleted;
    NSString * _kind;
    struct CGSize { 
        double width; 
        double height; 
    }  _largeThumbnailSize;
    bool  _selectable;
    bool  _selected;
    long long  _state;
    NSError * _thumbnailError;
    long long  _thumbnailIndex;
    PHImportAssetDataRequest * _thumbnailRequest;
    NSMutableDictionary * _thumbnailRequestsBySize;
    struct CGSize { 
        double width; 
        double height; 
    }  _thumbnailSize;
}

@property (nonatomic, readonly) double aspectRatio;
@property (nonatomic) PUImportAssetCollection *assetCollection;
@property (nonatomic, retain) NSMutableDictionary *assetRequestsBySize;
@property (nonatomic, readonly) long long badgeType;
@property (nonatomic, readonly) NSDate *creationDate;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSString *debugDisplayName;
@property (nonatomic, readonly) NSString *deleteSession;
@property (readonly, copy) NSString *description;
@property (nonatomic) <PUImportDisplayDelegate> *displayDelegate;
@property (getter=isDuplicate, nonatomic, readonly) bool duplicate;
@property (nonatomic, readonly) double duration;
@property (getter=isFavorite, nonatomic, readonly) bool favorite;
@property (nonatomic, readonly) NSDate *fileCreationDate;
@property (nonatomic, readonly) NSString *fileName;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) float hdrGain;
@property (nonatomic) double imageProcessingEndTime;
@property (nonatomic) double imageProcessingStartTime;
@property (nonatomic, readonly) NSDictionary *imageRepresentations;
@property (nonatomic, retain) NSMutableDictionary *imageRepresentationsBySize;
@property (nonatomic, readonly) PHImportAsset *importAsset;
@property (nonatomic, readonly) NSDate *importDate;
@property (nonatomic, readonly) bool isDeleted;
@property (nonatomic, readonly) bool isInCloud;
@property (nonatomic, readonly) bool isMediaAsset;
@property (nonatomic, readonly) bool isPanoramicImage;
@property (nonatomic, readonly) NSString *kind;
@property (nonatomic) struct CGSize { double x1; double x2; } largeThumbnailSize;
@property (nonatomic, readonly) NSString *localizedGeoDescription;
@property (nonatomic, readonly) unsigned long long mediaSubtypes;
@property (nonatomic, readonly) long long mediaType;
@property (nonatomic, readonly) long long playbackStyle;
@property (nonatomic, readonly) long long playbackVariation;
@property (nonatomic, readonly) bool representsBurst;
@property (getter=isSelectable, nonatomic, readonly) bool selectable;
@property (getter=isSelected, nonatomic, readonly) bool selected;
@property (nonatomic, readonly) long long state;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSError *thumbnailError;
@property (nonatomic, readonly) long long thumbnailIndex;
@property (nonatomic) PHImportAssetDataRequest *thumbnailRequest;
@property (nonatomic, retain) NSMutableDictionary *thumbnailRequestsBySize;
@property (nonatomic) struct CGSize { double x1; double x2; } thumbnailSize;
@property (nonatomic, readonly) id uuid;

+ (id)alreadyImportedGroupIdentifier;
+ (id)dateFormatter;
+ (bool)hasPanoramaImageDimensions:(struct CGSize { double x1; double x2; })arg1;
+ (id)importAssetsFromModels:(id)arg1;

- (void).cxx_destruct;
- (id)accessibilityLabel;
- (void)addImageRepresentation:(id)arg1;
- (void)addThumbnailRequest:(id)arg1;
- (double)aspectRatio;
- (id)assetCollection;
- (id)assetDataRequestForRequestSize:(unsigned long long)arg1;
- (id)assetRequestsBySize;
- (long long)badgeType;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bestCropRectForAspectRatio:(double)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)creationDate;
- (id)debugDisplayName;
- (id)deleteSession;
- (id)description;
- (id)displayDelegate;
- (double)duration;
- (id)fileCreationDate;
- (id)fileName;
- (id)groupIdentifier;
- (unsigned long long)hash;
- (double)imageProcessingEndTime;
- (double)imageProcessingStartTime;
- (id)imageRepresentations;
- (id)imageRepresentationsBySize;
- (id)importAsset;
- (id)importDate;
- (id)init;
- (id)initWithImportAsset:(id)arg1;
- (id)initWithKind:(id)arg1 selectable:(bool)arg2;
- (long long)isContentEqualTo:(id)arg1;
- (bool)isDeleted;
- (bool)isDuplicate;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToImportItemViewModel:(id)arg1;
- (bool)isFavorite;
- (bool)isInCloud;
- (bool)isMediaAsset;
- (bool)isPanoramicImage;
- (bool)isSelectable;
- (bool)isSelected;
- (id)kind;
- (struct CGSize { double x1; double x2; })largeThumbnailSize;
- (unsigned long long)mediaSubtypes;
- (long long)mediaType;
- (id)mutableChangeObject;
- (void)performChanges:(id /* block */)arg1;
- (long long)playbackStyle;
- (long long)playbackVariation;
- (void)removeAssetDataRequestForRequestSize:(unsigned long long)arg1;
- (void)removeThumbnailRequest:(id)arg1;
- (bool)representsBurst;
- (void)setAssetCollection:(id)arg1;
- (void)setAssetDataRequest:(id)arg1 forRequestSize:(unsigned long long)arg2;
- (void)setAssetRequestsBySize:(id)arg1;
- (void)setDeleteSession:(id)arg1;
- (void)setDisplayDelegate:(id)arg1;
- (void)setDuplicate:(bool)arg1;
- (void)setImageProcessingEndTime:(double)arg1;
- (void)setImageProcessingStartTime:(double)arg1;
- (void)setImageRepresentationsBySize:(id)arg1;
- (void)setImportDate:(id)arg1;
- (void)setIsDeleted:(bool)arg1;
- (void)setLargeThumbnailSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSelectable:(bool)arg1;
- (void)setSelected:(bool)arg1;
- (void)setState:(long long)arg1;
- (void)setThumbnailError:(id)arg1;
- (void)setThumbnailRequest:(id)arg1;
- (void)setThumbnailRequestsBySize:(id)arg1;
- (void)setThumbnailSize:(struct CGSize { double x1; double x2; })arg1;
- (long long)state;
- (id)thumbnailError;
- (long long)thumbnailIndex;
- (id)thumbnailRequest;
- (id)thumbnailRequestsBySize;
- (id)thumbnailRequestsForRequestSize:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })thumbnailSize;
- (id)uuid;

@end
