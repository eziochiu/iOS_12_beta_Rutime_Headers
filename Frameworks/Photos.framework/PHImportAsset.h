/* made by EzioChiu
   Image: /System/Library/Frameworks/Photos.framework/Photos
 */

@interface PHImportAsset : NSObject <PHImportDuplicateCheckerItem> {
    id  _assetId;
    NSDictionary * _assetProperties;
    PHImportAsset * _audioAsset;
    NSURL * _audioAssetURL;
    id  _avchdAssetId;
    PHImportAsset * _burstPick;
    bool  _canReference;
    unsigned long long  _copyMethod;
    NSString * _createdFileName;
    NSSet * _duplicateAssets;
    unsigned char  _duplicateStateConfidence;
    NSMutableDictionary * _duplicates;
    NSDate * _exifImageDate;
    NSDate * _fileCreationDate;
    NSData * _fileData;
    NSString * _fileExtension;
    unsigned char  _fileLocation;
    NSDate * _fileModificationDate;
    NSString * _fileName;
    unsigned long long  _fileSize;
    AVAssetImageGenerator * _imageGenerator;
    struct CGSize { 
        double width; 
        double height; 
    }  _imageSize;
    bool  _isAudio;
    bool  _isDuplicate;
    bool  _isHEIF;
    bool  _isImage;
    bool  _isJPEG;
    bool  _isMovie;
    bool  _isRAW;
    bool  _isRelated;
    bool  _isTIFF;
    PHImportAsset * _largeRender;
    NSDictionary * _largeRenderAssetProperties;
    NSURL * _largeRenderURL;
    NSDate * _lastDuplicateCheck;
    NSObject<OS_dispatch_queue> * _loadSidecars;
    IPAMetadata * _metadata;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _metadataLock;
    PHImportAsset * _miniRender;
    NSURL * _miniRenderURL;
    PHImportAsset * _rawAsset;
    NSDictionary * _rawAssetProperties;
    NSURL * _rawURL;
    NSMutableArray * _relatedBurstAssets;
    long long  _resourceType;
    NSMutableDictionary * _sidecarAssetsOfType;
    bool  _sidecarsLoaded;
    PHImportSource * _source;
    id  _sourceAssetIndetifier;
    PHImportSource * _strongSource;
    PHImportAsset * _thumbnailRender;
    NSDictionary * _thumbnailRenderAssetProperties;
    NSURL * _thumbnailRenderURL;
    struct CGSize { 
        double width; 
        double height; 
    }  _thumbnailSize;
    bool  _treatAsUnsupportedRAW;
    NSURL * _url;
    NSString * _uti;
    id  _uuid;
    PHImportAsset * _videoComplement;
    NSDictionary * _videoComplementAssetProperties;
    NSURL * _videoComplementURL;
}

@property (readonly) id assetId;
@property (nonatomic, retain) NSDictionary *assetProperties;
@property (nonatomic, retain) PHImportAsset *audioAsset;
@property (nonatomic, retain) NSURL *audioAssetURL;
@property (readonly) id avchdAssetId;
@property (nonatomic, retain) PHImportAsset *burstPick;
@property (nonatomic, readonly) NSString *burstUUID;
@property (nonatomic, readonly) bool canDelete;
@property (nonatomic, readonly) bool canReference;
@property (nonatomic) unsigned long long copyMethod;
@property (nonatomic, retain) NSString *createdFileName;
@property (readonly) NSDate *dateKey;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSSet *duplicateAssets;
@property unsigned char duplicateStateConfidence;
@property (retain) NSMutableDictionary *duplicates;
@property (nonatomic, readonly) NSNumber *duration;
@property (nonatomic, retain) NSDate *exifImageDate;
@property (nonatomic, retain) NSDate *fileCreationDate;
@property (nonatomic, retain) NSData *fileData;
@property (nonatomic, retain) NSString *fileExtension;
@property (nonatomic) unsigned char fileLocation;
@property (nonatomic, retain) NSDate *fileModificationDate;
@property (nonatomic, retain) NSString *fileName;
@property (nonatomic) unsigned long long fileSize;
@property (nonatomic, readonly) bool hasAdjustments;
@property (nonatomic, readonly) bool hasAudioAttachment;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) AVAssetImageGenerator *imageGenerator;
@property (nonatomic) struct CGSize { double x1; double x2; } imageSize;
@property (nonatomic, readonly) bool isAVCHD;
@property (nonatomic, readonly) bool isAudio;
@property (nonatomic, readonly) bool isBurst;
@property bool isDuplicate;
@property (nonatomic, readonly) bool isGrouped;
@property (nonatomic, readonly) bool isHDR;
@property (nonatomic, readonly) bool isHEIF;
@property (nonatomic, readonly) bool isImage;
@property (nonatomic, readonly) bool isJPEG;
@property (nonatomic, readonly) bool isJpegPlusRAW;
@property (nonatomic, readonly) bool isLivePhoto;
@property (nonatomic, readonly) bool isMovie;
@property (nonatomic, readonly) bool isRAW;
@property (nonatomic, readonly) bool isRelated;
@property (nonatomic, readonly) bool isRendered;
@property (nonatomic, readonly) bool isSDOF;
@property (nonatomic, readonly) bool isSloMo;
@property (nonatomic, readonly) bool isTIFF;
@property (nonatomic, readonly) bool isTagged;
@property (nonatomic, readonly) bool isTimelapse;
@property (nonatomic, readonly) bool isViewable;
@property (nonatomic, retain) PHImportAsset *largeRender;
@property (nonatomic, retain) NSDictionary *largeRenderAssetProperties;
@property (nonatomic, retain) NSURL *largeRenderURL;
@property (retain) NSDate *lastDuplicateCheck;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *loadSidecars;
@property (nonatomic, retain) IPAMetadata *metadata;
@property (nonatomic, retain) PHImportAsset *miniRender;
@property (nonatomic, retain) NSURL *miniRenderURL;
@property (readonly) id nameKey;
@property (readonly) id originatingAssetID;
@property (nonatomic, readonly) NSString *parentFolderPath;
@property (nonatomic, retain) PHImportAsset *rawAsset;
@property (nonatomic, retain) NSDictionary *rawAssetProperties;
@property (nonatomic, retain) NSURL *rawURL;
@property (nonatomic, retain) NSMutableArray *relatedBurstAssets;
@property (nonatomic, readonly) id representedObject;
@property (nonatomic, readonly) unsigned long long requiredBytesToImport;
@property (nonatomic) long long resourceType;
@property (nonatomic, readonly) NSArray *sidecarAssets;
@property (nonatomic, retain) NSMutableDictionary *sidecarAssetsOfType;
@property (nonatomic) bool sidecarsLoaded;
@property (readonly) id sizeKey;
@property (nonatomic) PHImportSource *source;
@property (nonatomic, retain) id sourceAssetIndetifier;
@property (readonly) Class superclass;
@property (nonatomic, retain) PHImportAsset *thumbnailRender;
@property (nonatomic, retain) NSDictionary *thumbnailRenderAssetProperties;
@property (nonatomic, retain) NSURL *thumbnailRenderURL;
@property (nonatomic) struct CGSize { double x1; double x2; } thumbnailSize;
@property (nonatomic) bool treatAsUnsupportedRAW;
@property (nonatomic, retain) NSURL *url;
@property (nonatomic, retain) NSString *uti;
@property (nonatomic, readonly) id uuid;
@property (nonatomic, retain) PHImportAsset *videoComplement;
@property (nonatomic, retain) NSDictionary *videoComplementAssetProperties;
@property (nonatomic, retain) NSURL *videoComplementURL;

+ (id)assetFileForURL:(id)arg1;
+ (bool)conformsToUTTypes:(id)arg1 forExtention:(id)arg2;
+ (bool)isAudio:(id)arg1;
+ (bool)isAudioUTI:(id)arg1;
+ (bool)isHeifUTI:(id)arg1;
+ (bool)isImage:(id)arg1;
+ (bool)isImageUTI:(id)arg1;
+ (bool)isJpegUTI:(id)arg1;
+ (bool)isMovie:(id)arg1;
+ (bool)isMovieUTI:(id)arg1;
+ (bool)isRawUTI:(id)arg1;
+ (bool)isSidecarType:(id)arg1;
+ (unsigned char)isSupportedFile:(id)arg1 uti:(id)arg2;
+ (bool)isTiffUTI:(id)arg1;
+ (id)loadDatesForAssets:(id)arg1 atEnd:(id /* block */)arg2;
+ (void)logImageDateFileDateDifferencesForAsset:(id)arg1;
+ (id)supportedAudioTypes;
+ (id)supportedImageTypes;
+ (id)supportedMovieTypes;
+ (id)supportedTypes;
+ (bool)uti:(id)arg1 conformsToUTTypes:(id)arg2;

- (void).cxx_destruct;
- (void)_accessMetadata:(id /* block */)arg1;
- (void)_addRelatedRecordsToRecord:(id)arg1 primaryRecord:(id)arg2;
- (id)_loadMetadata;
- (void)_loadSidecarFiles;
- (id)aaeSidecar;
- (void)addBurstAsset:(id)arg1;
- (void)addSidecarAsset:(id)arg1;
- (id)assetId;
- (id)assetProperties;
- (id)audioAsset;
- (id)audioAssetURL;
- (struct CGImage { }*)avThumbnailOfSize:(unsigned long long)arg1 canceler:(id)arg2 error:(id*)arg3;
- (id)avchdAssetId;
- (id)burstPick;
- (int)burstPickType;
- (id)burstUUID;
- (bool)canDelete;
- (bool)canPreserveFolderStructure;
- (bool)canReference;
- (struct CGSize { double x1; double x2; })cgImageSize;
- (id)checkForSidecarWithExtension:(id)arg1;
- (void)configureWithUTI:(id)arg1 supportedType:(unsigned char)arg2;
- (unsigned long long)copyMethod;
- (id)createdFileName;
- (struct CGSize { double x1; double x2; })cropEXIFThumbSize:(struct CGSize { double x1; double x2; })arg1 originalSize:(struct CGSize { double x1; double x2; })arg2;
- (id)dateKey;
- (id)description;
- (id)descriptionWithPrefix:(id)arg1;
- (void)downloadToPathAsync:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)duplicateAssets;
- (id)duplicateAssetsForLibrary:(id)arg1;
- (unsigned char)duplicateStateConfidence;
- (id)duplicates;
- (id)duration;
- (id)exifImageDate;
- (void)fetchMetadataAsync:(id /* block */)arg1;
- (id)fetchMetadataSync;
- (id)fileCreationDate;
- (id)fileData;
- (id)fileExtension;
- (unsigned char)fileLocation;
- (id)fileModificationDate;
- (id)fileName;
- (unsigned long long)fileSize;
- (id)groupingUUID;
- (bool)hasAdjustments;
- (bool)hasAudioAttachment;
- (bool)hasOriginalResourceType;
- (id)imageGenerator;
- (struct CGSize { double x1; double x2; })imageSize;
- (struct CGImage { }*)imageThumbnailOfSize:(unsigned long long)arg1 canceler:(id)arg2 error:(id*)arg3;
- (id)importRecordForPrimaryAsset;
- (void)informDelegateOfAssetUpdates;
- (id)init;
- (id)initWithURL:(id)arg1 uti:(id)arg2 supportedType:(unsigned char)arg3;
- (bool)isAVCHD;
- (bool)isAppropriateForUI;
- (bool)isAudio;
- (bool)isBlessed:(id)arg1 includeXmp:(bool)arg2;
- (bool)isBurst;
- (bool)isDuplicate;
- (bool)isGrouped;
- (bool)isHDR;
- (bool)isHEIF;
- (bool)isImage;
- (bool)isJPEG;
- (bool)isJpegPlusRAW;
- (bool)isLivePhoto;
- (bool)isMovie;
- (bool)isRAW;
- (bool)isRelated;
- (bool)isRendered;
- (bool)isSDOF;
- (bool)isSloMo;
- (bool)isTIFF;
- (bool)isTagged;
- (bool)isTimelapse;
- (bool)isValidForReference;
- (bool)isValidMetadata:(id)arg1;
- (bool)isVideoComplementOf:(id)arg1;
- (bool)isViewable;
- (id)largeRender;
- (id)largeRenderAssetProperties;
- (id)largeRenderURL;
- (id)lastDuplicateCheck;
- (void)loadMetadataAsync:(id /* block */)arg1;
- (bool)loadMetadataSync;
- (void)loadSidecarFiles;
- (id)loadSidecars;
- (id)mediaGroupId;
- (id)metadata;
- (id)miniRender;
- (id)miniRenderURL;
- (id)nameKey;
- (id)originatingAssetID;
- (id)parentFolderPath;
- (bool)performAdditionalLivePhotoChecksOnImageAsset:(id)arg1;
- (id)rawAsset;
- (id)rawAssetProperties;
- (id)rawURL;
- (id)relatedAssets;
- (id)relatedBurstAssets;
- (unsigned long long)relatedBytes;
- (struct CGImage { }*)removeBlackBarsFromExifThumbnail:(struct CGImage { }*)arg1 fullSize:(struct CGSize { double x1; double x2; })arg2;
- (void)removeSidecarAsset:(id)arg1;
- (id)representedObject;
- (unsigned long long)requiredBytesToImport;
- (long long)resourceType;
- (id)resourceTypes;
- (void)setAssetProperties:(id)arg1;
- (void)setAudioAsset:(id)arg1;
- (void)setAudioAssetURL:(id)arg1;
- (void)setBurstPick:(id)arg1;
- (void)setCopyMethod:(unsigned long long)arg1;
- (void)setCreatedFileName:(id)arg1;
- (void)setDuplicateStateConfidence:(unsigned char)arg1;
- (void)setDuplicates:(id)arg1;
- (void)setDuplicates:(id)arg1 forLibrary:(id)arg2;
- (void)setExifImageDate:(id)arg1;
- (void)setFileCreationDate:(id)arg1;
- (void)setFileData:(id)arg1;
- (void)setFileExtension:(id)arg1;
- (void)setFileLocation:(unsigned char)arg1;
- (void)setFileModificationDate:(id)arg1;
- (void)setFileName:(id)arg1;
- (void)setFileSize:(unsigned long long)arg1;
- (void)setImageGenerator:(id)arg1;
- (void)setImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setIsDuplicate:(bool)arg1;
- (void)setLargeRender:(id)arg1;
- (void)setLargeRenderAssetProperties:(id)arg1;
- (void)setLargeRenderURL:(id)arg1;
- (void)setLastDuplicateCheck:(id)arg1;
- (void)setLoadSidecars:(id)arg1;
- (void)setMetadata:(id)arg1;
- (void)setMiniRender:(id)arg1;
- (void)setMiniRenderURL:(id)arg1;
- (void)setRawAsset:(id)arg1;
- (void)setRawAssetProperties:(id)arg1;
- (void)setRawURL:(id)arg1;
- (void)setRelatedBurstAssets:(id)arg1;
- (void)setResourceType:(long long)arg1;
- (void)setSidecarAssetsOfType:(id)arg1;
- (void)setSidecarsLoaded:(bool)arg1;
- (void)setSource:(id)arg1;
- (void)setSourceAssetIndetifier:(id)arg1;
- (void)setThumbnailRender:(id)arg1;
- (void)setThumbnailRenderAssetProperties:(id)arg1;
- (void)setThumbnailRenderURL:(id)arg1;
- (void)setThumbnailSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTreatAsUnsupportedRAW:(bool)arg1;
- (void)setUrl:(id)arg1;
- (void)setUti:(id)arg1;
- (void)setVideoComplement:(id)arg1;
- (void)setVideoComplementAssetProperties:(id)arg1;
- (void)setVideoComplementURL:(id)arg1;
- (id)sidecarAssetAtPath:(id)arg1;
- (unsigned long long)sidecarAssetBytes;
- (id)sidecarAssets;
- (id)sidecarAssetsOfType;
- (id)sidecarInfoDictionaries;
- (id)sidecarInfoDictionary;
- (bool)sidecarsLoaded;
- (id)sizeKey;
- (id)slmSidecar;
- (id)source;
- (id)sourceAssetIndetifier;
- (id)thumbnailForSize:(unsigned long long)arg1 atEnd:(id /* block */)arg2;
- (void)thumbnailForSize:(unsigned long long)arg1 usingRequest:(id)arg2 atEnd:(id /* block */)arg3;
- (id)thumbnailRender;
- (id)thumbnailRenderAssetProperties;
- (id)thumbnailRenderURL;
- (struct CGSize { double x1; double x2; })thumbnailSize;
- (id)timezoneCorrectedExifImageDate;
- (bool)treatAsUnsupportedRAW;
- (void)updateMetadata:(id)arg1;
- (id)url;
- (id)uti;
- (id)uuid;
- (id)validateMetadataForImportRecord:(id)arg1;
- (id)videoComplement;
- (id)videoComplementAssetProperties;
- (id)videoComplementURL;
- (id)xmpSidecar;

@end
